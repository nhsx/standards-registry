name: deploy-dev

on:
  - push
  # workflow_run:
  #   branches:
  #     - master
  #   workflows:
  #     - build-and-test
  #   types:
  #     - completed
  #   conclusion:
  #     - success

jobs:
  deploy-csv-exporter:
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        working-directory: csv-exporter
    env:
      SLS_DEBUG: 1
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - run: npm ci
      - run: npx serverless config credentials --provider aws --key ${{ secrets.SERVERLESS_AWS_ACCESS_KEY_ID }} --secret ${{ secrets.SERVERLESS_AWS_SECRET_ACCESS_KEY }} --profile k8sDev
      - run: npx serverless deploy --aws-profile=k8sDev --verbose --debug=*

  ui:
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        working-directory: ui
    env:
      AWS_REGION: eu-west-2
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: configure credentials (using us-east-1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Public ECR
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
      - name: build and push
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: nhsx-standards-directory
          IMAGE_TAG: ui-${{ github.sha }}
          NEXT_PUBLIC_TRACKING_ID: ${{ secrets.TRACKING_ID }}
          NEXT_PUBLIC_TAG_ID: ${{ secrets.GOOGLE_TAG_ID }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: deploy
        uses: koslib/helm-eks-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG_FILE }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: nhsx-standards-directory
          IMAGE_TAG: ui-${{ github.sha }}
          PAGES_CKAN_URL: 'https://manage.test.standards.nhs.uk/api/action'
        with:
          command: >-
            helm upgrade --install --wait -n dev ui ./charts/ui
            --set ui.config.ckanurl='${{ secrets.CKAN_URL }}'
            --set ui.config.tracking_id='${{ secrets.TRACKING_ID }}'
            --set ui.config.google_tag_id='${{ secrets.GOOGLE_TAG_ID }}'
            --set ui.container.image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            --set ui.config.pagesckanurl='${{ secrets.PAGES_CKAN_URL }}'

  ckan:
    runs-on: ubuntu-latest
    environment: dev
    env:
      AWS_REGION: eu-west-2
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: configure credentials (using us-east-1)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Public ECR
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
      - name: build and push
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: nhsx-standards-directory
          IMAGE_TAG: ckan-${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG -f ./Dockerfile-ckan .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: ckan deploy
        uses: koslib/helm-eks-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG_FILE }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: nhsx-standards-directory
          IMAGE_TAG: ckan-${{ github.sha }}
        with:
          command: >-
            helm upgrade ckan --debug -n dev --repo https://marvell-consulting.github.io/ckan-helm-chart --install --wait ckan -f ./charts/ckan/values.yaml
            --set ckan.sysadminApiToken='${{ secrets.CKAN_SYSADMIN_API_TOKEN }}'
            --set ckan.sysadminName='${{ secrets.CKAN_SYSADMIN_NAME }}'
            --set ckan.sysadminPassword='${{ secrets.CKAN_SYSADMIN_PASS }}'
            --set ckan.db.ckanDbPassword='${{ secrets.CKAN_DB_PASS }}'
            --set ckan.datastore.RwDbPassword='${{ secrets.CKAN_DATASTORE_RW_DB_PASS }}'
            --set ckan.datastore.RoDbPassword='${{ secrets.CKAN_DATASTORE_RO_DB_PASS }}'
            --set ckan.siteUrl='${{ secrets.CKAN_SITE_URL }}'
            --set ckan.psql.masterPassword='${{ secrets.MASTER_DB_PASS }}'
            --set ckan.db.ckanDbUrl='${{ secrets.DB_HOST }}'
            --set ckan.datastore.RwDbUrl='${{ secrets.DB_HOST }}'
            --set ckan.datastore.RoDbUrl='${{ secrets.DB_HOST }}'
            --set image.repository=$ECR_REGISTRY/$ECR_REPOSITORY
            --set image.tag=$IMAGE_TAG
            --set ckan.psql.initialize=false
            --set solr.initialize.enabled=false

  integrationtest:
    if: ${{ success() }}
    needs:
      - ui
      - ckan
      - deploy-csv-exporter
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ui
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json
      - run: npm ci
      - run: BASE_URL=https://dev.standards.nhs.uk npm run test:integration

  notifypass:
    runs-on: ubuntu-latest
    if: ${{ success() }}
    needs:
      - integrationtest
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_USERNAME: github-bot
          SLACK_CHANNEL: developers
          SLACK_COLOR: good
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: 'dev deployment: succeeded'
          SLACK_MESSAGE: ':+1::rocket:'
          MSG_MINIMAL: 'true'
